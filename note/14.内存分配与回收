判断对象的存活
    引用计数法：
        快，方便，实现简单，缺点：对象相互引用时，很难判断对象是否该回收。（PHP语言在用）
    可达性分析：
    来判定对象是否存活的。这个算法的基本思路就是通过一系列的称为“GC Roots”的对象作为起始点，
    从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到
    GC Roots没有任何引用链相连时，则证明此对象是可回收的。
    作为GC Roots的对象包括下面几种：
        方法区中类静态属性引用的对象。
        方法区中常量引用的对象。
        虚拟机栈（栈帧中的本地变量表）中引用的对象。
        本地方法栈中JNI（即一般说的Native方法）引用的对象。

复制算法（新生代：eden、from survivor、to survivor）
        将内存分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor[1]。
    当回收时，将Eden和Survivor中还存活着的对象一次性地复制到另外一块Survivor空间上，最后清理
    掉Eden和刚才用过的Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8:1，也就是
    每次新生代中可用内存空间为整个新生代容量的90%（80%+10%），只有10%的内存会被“浪费”。当然，
    98%的对象可回收只是一般场景下的数据，我们没有办法保证每次回收都只有不多于10%的对象存活，
    当Survivor空间不够用时，需要依赖其他内存（这里指老年代）进行分配担保（Handle Promotion）
标记-清除算法（老年代：Mark-Sweep）
        算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收所有被标记的对象。
    它的主要不足空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过
    程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。
标记-整理算法（老年代：Mark-Compact）
        首先标记出所有需要回收的对象，在标记完成后，后续步骤不是直接对可回收对象进行清理，而是让所有存活的
    对象都向一端移动，然后直接清理掉端边界以外的内存。



堆内存分配策略
a,对象优先在Eden分配，如果说Eden内存空间不足，就会发生Minor GC
b,大对象直接进入老年代，大对象：需要大量连续内存空间的Java对象，比如很长的字符串和大型数组，
    1、导致内存有空间，还是需要提前进行垃圾回收获取连续空间来放他们，
    2、会进行大量的内存复制。
c,-XX:PretenureSizeThreshold 参数 ，大于这个数量直接在老年代分配，缺省为0 ，表示绝不会直接分配在老年代。
d,长期存活的对象将进入老年代，默认15岁，-XX:MaxTenuringThreshold调整
e,空间分配担保：新生代中有大量的对象存活，survivor空间不够，当出现大量对象在MinorGC后仍然存活的情况
    （最极端的情况就是内存回收后新生代中所有对象都存活），就需要老年代进行分配担保，把Survivor无法容纳的对象
    直接进入老年代.只要老年代的连续空间大于新生代对象的总大小或者历次晋升的平均大小，就进行Minor GC，否则FullGC。